EFLAGS:
    0:     CF ( CArry Flag )
    1:     1
    2:     PF ( Parity Flag )
    3:     0
    4:     AF ( Auxiliary Carry Flag )
    5:     0
    6:     ZF ( Zero Flag )
    7:     SF ( Sign Flag )
    8:     TF ( Trap Flag )
    9:     IF ( Interrupt flag )
    10:    DF ( Direction Flag )
    11:    OF ( Overflow Flag )
    12-13: IOPL ( I/O Privilege Level )
    14:    NF ( Nest Flag )
    10:    0
    16:    RF ( Resume Flag )
    17:    VM ( Virtual-8086 Mode )
    18-31: Reserved

CR0:
    0:    PE ( Protected Mode Enable )
    1:    MP ( Monitor Co-Processor )
    2:    EM ( Emulation )
    3:    TS ( Task Switched )
    4:    ET ( Extension Type )
    5:    NE ( Numeric Error )
    6-15: Reserved
    16:   WP ( Write Protect )
    17:   Reserved
    18:   AM ( Alignment Mask )
    19-28: Reserved
    29:   NW ( Not-Write Through )
    30:   CD ( Cache disable )
    31:   PG ( Paging )

CR1: Reserved
CR2: Page-Fault Linear Address
CR3:
    0-11: Reserved
    12-31: Page-Directory Base

GDTR, IDTR, LDTR:
    0-15: table length
    16-47: 32 bit base address

TSS is only stored in GDT.

TSS Descriptor:
[1]
    0-7: Base address 16-23
    8-11: Type, 9: B
    12: 0
    13-14: DPL
    15: P
    16-19: Segment Limit 16..19
    20: AVL
    21: 0
    22: 0
    23: G, G=0 ->  Segment Limit >= 103
    24-31: Base address 24-31
[2]
    0-15: Segment Limit 0-15
    16-31: Base address 0-15

LDT:   Local Descriptor Table
GDT:   Global Descriptor Table
TR:    Task Register
MSW:   Machine State Word

Lxxx: Load xxx Register
Sxxx: Store xxx Register
xxx: LDT, GDT, TR, IDT

LMSW: Load machine State Word, 0-15: CR0


Mov CRn:  Move Control Registor
CLTS: Clear TS Flag
LSL:  Load Segment Limit
HLT:  Halt Processor

CPL:  Current Privilage Level

Segment Selector:
    (0-1): RPL (Requested Privilege Level)
    (2): TI  ( Table Index )
           1: LDT, 0:GDT
    3-15:  Index
    CS, SS, DS, ES, FS, GS

Segment Descriptor:
[1]
    (0-15):   Segment Limit  15..0
    (16-31):  Base Address 15..0

[2]
    (0-7):    Base Address 23..16
    (8-11):   Type Field

    (12):     S (Descriptor Type Flag)
              0: System Descriptor
              1: Code/Data Descriptor
    (13-14):  DPL (Descriptor Privilege Level)
    (15):     P ( Segment Present )
    (16-19):  Segment Limit 19..16
    (20):     AVL ( Avaliable and Reserved Bits )
    (21):     0   ( Avaliable and Reserved Bits )
    (22):     D/B ( Default Operation Size/Default Stack Pointer Size and/or Upper Bound )
    (23):     G ( Granularity )
    (24-31):  Base Address 31..24

    S=1, Type:
        11: Data-Code Flag, 1: Data, 0: Code
        Data:
            8: A(Accessed), 9: W(Write-enable), 10: E(Expansion-direction)
        Code:
            8: A(Accessed), 9: R(Read-enable),  10: C(Conforming)
    S=0, Type:
        System Descriptor:
            LDT Descriptor, TSS Descriptor, Gates Descriptor( Call, Task, Trap, Interrupt )
        8-11:
            0000: Reserved
            0001: 16-Bit TSS(Avalible)
            0010: LDT
            0011: 16-Bit TSS(Busy)
            0100: 16-Bit Call Gate
            0101: Task Gate
            0110: 16-Bit Interrupt Gate
            0111: 16-Bit Trap Gate
            1000: Reserved
            1001: 32-Bit TSS(Avalible)
            1010: Reserved
            1011: 32-Bit TSS(Busy)
            1100: 32-Bit Call Gate
            1101: Reserved
            1110: 32-Bit Interrupt Gate
            1111: 32-Bit Trap Gate

Page:
    0-11: Offset Address
    12-31: Base Address
        22-31: Page Directory
        12-21: Page Table
    Page Table:
        12-31: Page Fram Address
        0:     P ( Present )
        1:     R/W ( Read/Write )
        2:     U/S ( User/Supervisor )
        3-4:   0
        5:     A ( Accesed )
        6:     D ( Dirty )
        7-8:   0
        9-11:  AVL

IDT table contains: Interrupt gate, Trap gate, Task gate.
Interrupt Gate:
[1]
    0-4:
    5-7:
    8-12:
    13-14: DPL
    15: P
    16-31: Entry address 16-31
[2]
    0-15: Entry adreff 0-15
    16-31: Segment Descriptor

website of assembly language:
[1] www.cs.virginia.edu/~evans/cs216/guides/x86.html
[2] www.jagregory.com/abrash/-zen-of-asm/
[3] https://github.com/jagregory/abrash-zen-of-asm
[4] https://www.aldeid.com/wiki/X86-assembly/Instructions
